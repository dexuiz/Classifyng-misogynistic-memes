# -*- coding: utf-8 -*-
"""css_sub_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kq-sUEN9bxJtBu1xEizdDj1amV9nye-U
"""

!pip install praw
import pandas as pd
import numpy as np 
import os 
import praw
import requests
import json

PATH  = "/content/drive/MyDrive/CSSdata2"
subreddit_list = ['meme','memes','Memes_Of_The_Dank','darkmemers','MemeYourEnthusiasm','dankmemes','Grimdank','MemesIRL','dankmeme','okbuddyretard','terriblefacebookmemes','ComedyCemetery']
selected_subreddit ="memes"

meme_analysis = pd.read_csv(os.path.join(PATH,selected_subreddit+"~filtered","analysis.csv"))



reddit = praw.Reddit(
    client_id="dQG4qfGiEo-KjQV8wd11jQ",
    client_secret="5oekxFnVLknPdwSwIHTWBSdkbzD45Q",
    user_agent="my user agent",
    check_for_async=False
)

obj = requests.get('https://www.reddit.com/r/memes/about.json')
obj.json()

# subscribers = obj.json()['subscribers']
# subscribers = 2023963
subscribers = 18634432

meme_analysis["popularity"] = meme_analysis.apply(lambda x: x["upvotes"]/subscribers,axis=1)

np.mean(meme_analysis[meme_analysis['model_label']==1]["popularity"])

def subscriber_count(name):
    return reddit.subreddit(name).subscribers

"""
Process SUB to apply upvote engagement metric and comment engagement metric
"""
def process_sub(sub_name,analysis):
    user_count = subscriber_count(sub_name)
    analysis["upvote_metric"] = analysis.apply(lambda x: x["upvotes"]/user_count,axis=1)
    analysis["comment_metric"] = analysis.apply(lambda x: x["num_comments"]/user_count,axis=1)

    overall_json_path =os.path.join(PATH,sub_name+"~overall.json")
    if not os.path.exists(overall_json_path):
        return 0,0
    
    overall_json = json.load(open(overall_json_path,"r"))
    
    sub_up_avg =[]
    sub_cmt_avg = []

    for item in overall_json[sub]:
        upvote_count = item["upvotes"]
        comment_count = item["num_comments"]
        sub_up_avg.append(upvote_count)
        sub_cmt_avg.append(comment_count)
    
    misogynistic_upvote_metric = np.mean(analysis[analysis['model_label']==1]['upvote_metric'].to_numpy())
    misogynistic_comment_metric = np.mean(analysis[analysis['model_label']==1]['comment_metric'].to_numpy())

    return misogynistic_upvote_metric,np.mean(sub_up_avg),misogynistic_comment_metric,np.mean(sub_cmt_avg)

"""
Process moderation Response
"""
def process_moderation(sub_name,analysis):
    # analysis["removed"] = analysis.apply(lambda x:x["removed_by_category"].notna(),axis=1)    
    if  "removed_by_category" not in analysis.columns:
        return 0.0
    analysis["removed"] = analysis["removed_by_category"].notna()
    total = len(analysis[analysis["model_label"]==1].to_numpy())
    moderated = len(analysis[(analysis["model_label"]==1) & (analysis["removed"]==True)].to_numpy())
    return moderated/total

"""
Find users of subreddits posting misogyny for analysis
"""
def process_users(sub_name,analysis):
    return analysis[analysis['model_label']==1]['author'].to_numpy()

"""
Process misogny award data
"""
def process_gildings(sub_name,analysis):
    gilding_data = analysis[analysis['model_label']==1]['gildings'].to_numpy()
    
    gild_count,m_count= 0,0
    for i in gilding_data:
        if i!="{}":
          gild_count+=1
        m_count+=1
    return gild_count,m_count

"""
Process non-misogny award data
"""
def process_overall_gildings(sub_name,analysis):
    overall_json_path =os.path.join(PATH,sub_name+"~overall.json")
    if not os.path.exists(overall_json_path):
        return 0,0
    
    overall_json = json.load(open(overall_json_path,"r"))
    
    gild,total=0,0    

    for item in overall_json[sub]:
        if item['gildings']!={}:
            gild+=1
        total+=1
    return gild,total

users ={}
overall_gild_count,overall_mis_count=0,0
non_gild_count,non_total_count = 0,0
mis_up=[]
over_up = []
mis_cmt = []
over_cmt = []
mod_response = []

for sub in subreddit_list:
    print(sub)
    if not os.path.exists(os.path.join(PATH,sub+"~filtered","analysis.csv")):
        continue
    analysis = pd.read_csv(os.path.join(PATH,sub+"~filtered","analysis.csv"))
    misogynistic_up_avg,overall_up_average,misogynistic_cmt_avg,overall_cmt_avg = process_sub(sub,analysis)
    print(f"M_up: {misogynistic_up_avg} O_up: {overall_up_average} M_cmt: {misogynistic_cmt_avg} O_cmt: {overall_cmt_avg} ")

    mis_up.append(misogynistic_up_avg)
    over_up.append(overall_up_average)

    mis_cmt.append(misogynistic_cmt_avg)
    over_cmt.append(overall_cmt_avg)
    
    mod_val = process_moderation(sub,analysis)

    mod_response.append(mod_val)

    # print("moderation % ", val)
    user_list = process_users(sub,analysis)
    users[sub]=user_list
    gild_count,mis_count = process_gildings(sub,analysis)
    overall_gild_count+=gild_count
    overall_mis_count+=mis_count

    g,o= process_overall_gildings(sub,analysis)
    non_gild_count+=g
    non_total_count+=o

import pandas 
import seaborn 
from matplotlib import pyplot as plt
print(len(over_up))

analysis_subs = ['meme', 'memes','Memes_Of_The_Dank','darkmemers','dankmemes','Grimdank','MemesIRL','dankmeme','okbuddyretard',"terriblefacebookmemes","ComedyCemetery"]





fig, ax1 = plt.subplots(figsize=(18, 10))
ax1.bar(analysis_subs, mis_up, color ='maroon',
        width = 0.4)
plt.tight_layout()
plt.xlabel("subreddits")
plt.ylabel("upvote engagement metric")
plt.title("normalized upvotes for misogynistic memes")
plt.show()

fig, ax1 = plt.subplots(figsize=(18, 10))
ax1.bar(analysis_subs, np.array(over_up)/np.array(mis_up), color ='maroon',
        width = 0.4)
plt.tight_layout()
plt.xlabel("subreddits")
plt.ylabel("ratio of upvote engagement metric")
plt.title("ratio of upvote engagement of normal memes to misogynistic memes")
plt.show()

fig, ax1 = plt.subplots(figsize=(18, 10))
ax1.bar(analysis_subs, mod_response, color ='blue',
        width = 0.4)
plt.tight_layout()
plt.xlabel("subreddits")
plt.ylabel("moderation response")
plt.title("moderation response to misogynistic memes")
plt.show()

fig, ax1 = plt.subplots(figsize=(18, 10))
ax1.bar(analysis_subs, mis_cmt, color ='green',
        width = 0.4)
plt.tight_layout()
plt.xlabel("subreddits")
plt.ylabel("comment engagement metric")
plt.title("normalized comment counts for misogynistic memes")
plt.show()

fig, ax1 = plt.subplots(figsize=(18, 10))
ax1.bar(analysis_subs, np.array(over_cmt)/np.array(mis_cmt), color ='green',
        width = 0.4)
plt.tight_layout()
plt.xlabel("subreddits")
plt.ylabel("ratio of comment engagement metric of normal to misogynistic")
plt.title("ratio of upvotes of normal memes to misogynistic memes")
plt.show()







